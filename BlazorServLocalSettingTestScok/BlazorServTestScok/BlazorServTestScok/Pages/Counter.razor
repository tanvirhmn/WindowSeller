@page "/counter"

@using Radzen
@using Radzen.Blazor
@using System.Text.Json

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager


<RadzenDataGrid 
    SelectionMode="DataGridSelectionMode.Multiple"  
    Render="@OnRender" 
    Data="@employees" 
    TItem="Employee" 
    ColumnWidth="400px"
@bind-Settings="@Settings" 
AllowFiltering="true" 
AllowColumnPicking="true" 
AllowGrouping="true" 
                                                    AllowVirtualization="true"
                                                    AllowPaging="false"
                                                    PageSize="10000"
                                                    ShowPagingSummary="false"
                AllowSorting="true" 
                AllowMultiColumnSorting="true" 
                ShowMultiColumnSortingIndex="true"
                AllowColumnResize="true" 
                AllowColumnReorder="true" 
                FilterPopupRenderMode="PopupRenderMode.OnDemand" 
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <RadzenDataGridColumn TItem="Employee" Property="FirstName" Title="First Name" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="LastName" Title="Last Name" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="BirthDate" Title="Birth Date" FormatString="{0:d}" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="Country" Title="Country" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="Notes" Title="Notes" />
    </Columns>
</RadzenDataGrid>

@code {
    IEnumerable<Employee> employees;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        employees = new List<Employee>();

    }
    DataGridSettings _settings;
    public DataGridSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;

        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "Settings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "Settings", JsonSerializer.Serialize<DataGridSettings>(Settings));
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadStateAsync();
            StateHasChanged();
        }
    }
    void OnRender(DataGridRenderEventArgs<Employee> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Sorts.Add(new SortDescriptor() { Property = "BirthDate", SortOrder = SortOrder.Descending });
            args.Grid.Sorts.Add(new SortDescriptor() { Property = "LastName", SortOrder = SortOrder.Ascending });
        }
    }

    public class Employee
    {

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public DateTime? BirthDate { get; set; }

        public string Country { get; set; }

        public string Notes { get; set; }
    }
}