@page "/counter"

@using Radzen
@using Radzen.Blazor
@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject ProtectedSessionStorage ProtectedSessionStore

@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

<RadzenDataGrid SelectionMode="DataGridSelectionMode.Multiple"
                Render="@OnRender"
                Data="@employees"
                TItem="Employee"
                ColumnWidth="400px"
                @bind-Settings="@Settings"
                AllowFiltering="true"
                AllowColumnPicking="true"
                AllowGrouping="true"
                AllowVirtualization="true"
                AllowPaging="false"
                PageSize="10000"
                ShowPagingSummary="false"
                AllowSorting="true"
                AllowMultiColumnSorting="true"
                ShowMultiColumnSortingIndex="true"
                AllowColumnResize="true"
                AllowColumnReorder="true"
                FilterPopupRenderMode="PopupRenderMode.OnDemand"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive">
    <Columns>
        <RadzenDataGridColumn TItem="Employee" Property="FirstName" Title="First Name" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="LastName" Title="Last Name" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="BirthDate" Title="Birth Date" FormatString="{0:d}" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="Country" Title="Country" Width="150px" />
        <RadzenDataGridColumn TItem="Employee" Property="Notes" Title="Notes" />
    </Columns>
</RadzenDataGrid>

@code {
    IEnumerable<Employee> employees;
    string settings = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        employees = new List<Employee>()
        {
            new Employee()
            {
               FirstName="AA" ,
               LastName="BA",
               BirthDate = DateTime.Now,
               Country="CA",
               Notes="FA"
            },
                        new Employee()
            {
               FirstName="AB" ,
               LastName="BB",
               BirthDate = DateTime.Now,
               Country="CB",
               Notes="FB"
            },
        };

    }


    DataGridSettings _settings;
    public DataGridSettings Settings
    {
        get
        {
            return _settings;
        }
        set
        {
            if (_settings != value)
            {
                _settings = value;
                InvokeAsync(SaveStateAsync);
            }
        }
    }

    private async Task LoadStateAsync()
    {
        await Task.CompletedTask;
        var result = await JSRuntime.InvokeAsync<string>("window.localStorage.getItem", "Settings");
        //var result = await ProtectedSessionStore.GetAsync<string>("Settings");
        //var result = HttpContextAccessor.HttpContext!.Session.GetString("Settings");
        if (!string.IsNullOrEmpty(result))
        {
            _settings = JsonSerializer.Deserialize<DataGridSettings>(result);
        }
    }

    private async Task SaveStateAsync()
    {
        await Task.CompletedTask;

        await JSRuntime.InvokeVoidAsync("window.localStorage.setItem", "Settings", JsonSerializer.Serialize<DataGridSettings>(Settings));
        //await ProtectedSessionStore.SetAsync("Settings", JsonSerializer.Serialize<DataGridSettings>(Settings));
        //HttpContextAccessor.HttpContext!.Session.SetString("Settings", JsonSerializer.Serialize<DataGridSettings>(Settings));
        //settings = JsonSerializer.Serialize<DataGridSettings>(Settings);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await LoadStateAsync();
        if (firstRender)
        {
            StateHasChanged();
        }
    }
    void OnRender(DataGridRenderEventArgs<Employee> args)
    {
        if (args.FirstRender)
        {
            args.Grid.Sorts.Add(new SortDescriptor() { Property = "BirthDate", SortOrder = SortOrder.Descending });
            args.Grid.Sorts.Add(new SortDescriptor() { Property = "LastName", SortOrder = SortOrder.Ascending });
        }
    }

    private int currentCount = 0;

    private void IncrementCount()
    {
        currentCount++;
        employees = new List<Employee>()
        {
            new Employee()
            {
               FirstName="AA" ,
               LastName="BA",
               BirthDate = DateTime.Now,
               Country="CA",
               Notes="FA"
            },
                        new Employee()
            {
               FirstName="AB" ,
               LastName="BB",
               BirthDate = DateTime.Now,
               Country="CB",
               Notes="FB"
            },
        };
        StateHasChanged();
    }

    public class Employee
    {

        public string FirstName { get; set; }

        public string LastName { get; set; }

        public DateTime? BirthDate { get; set; }

        public string Country { get; set; }

        public string Notes { get; set; }
    }
}