@page "/ordermanager"

@using WindowSellerWASM.Shared
@using WindowSellerWASM.BLL
@using WindowSellerWASM.BLL.DTOs
@using Radzen
@using Radzen.Blazor

@inject HttpClient Http


<RadzenText TextStyle="TextStyle.H2" TagName="TagName.H1" class="rz-pt-8">
    Order Manager
</RadzenText>

<RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Order" Click="@InsertOrderRow" Disabled=@(orderToInsert != null || orderToUpdate != null) />
<RadzenDataGrid @ref="ordersGrid" AllowAlternatingRows="true" AllowFiltering="false" AllowPaging="false" PageSize="5" AllowSorting="false" EditMode="DataGridEditMode.Single"
                Data="@orders" TItem="OrderDto" RowUpdate="@OnUpdateOrderRow" RowCreate="@OnCreateOrderRow" Sort="@Reset" Page="@Reset" Filter="@Reset" ShowExpandColumn="true" RowExpand="@OnOrderRowExpand">
    <Template Context="order">
        <RadzenButton ButtonStyle="ButtonStyle.Success" Icon="add_circle_outline" class="mt-2 mb-4" Text="Add New Window" Click="@InsertWindowRow" Disabled=@(windowToInsert != null || windowToUpdate != null) />
        <RadzenDataGrid @ref="windowsGrid" AllowAlternatingRows="true" AllowFiltering="false" AllowPaging="false" PageSize="5" AllowSorting="false" EditMode="DataGridEditMode.Single"
                        Data="@windows" TItem="WindowDto" RowUpdate="@OnUpdateWindowRow" RowCreate="@OnCreateWindowRow"
                        Sort="@ResetWindow" Page="@ResetWindow" Filter="@ResetWindow">
            <Columns>
                <RadzenDataGridColumn TItem="WindowDto" Property="WindowId" Title="WindowId" Visible="false" />
                <RadzenDataGridColumn TItem="WindowDto" Property="WindowName" Title="Window Name">
                    <EditTemplate Context="window">
                        <RadzenTextBox @bind-Value="window.WindowName" Style="width:100%; display: block" Name="WindowName" />
                        <RadzenRequiredValidator Text="Window Name is required" Component="WindowName" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WindowDto" Property="QuantityOfWindows" Title="Quantity Of Windows">
                    <EditTemplate Context="window">
                        <RadzenNumeric @bind-Value="window.QuantityOfWindows" Style="width:100%" Name="QuantityOfWindows" Min="1" Step="1" />
                        <RadzenRequiredValidator Text="Quantity Of Windows is required" Component="QuantityOfWindows" Popup="true" />
                    </EditTemplate>
                </RadzenDataGridColumn>
                <RadzenDataGridColumn TItem="WindowDto" Context="window" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                    <Template Context="window">
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditWindowRow(window))" @onclick:stopPropagation="true">
                        </RadzenButton>
                        <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteWindowRow(window))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                    <EditTemplate Context="window">
                        <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveWindowRow(window))">
                        </RadzenButton>
                        <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelWindowEdit(window))">
                        </RadzenButton>
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </Template>
    <Columns>
        <RadzenDataGridColumn TItem="OrderDto" Property="OrderId" Title="Order ID" Width="120px" Visible="false" />
        <RadzenDataGridColumn TItem="OrderDto" Property="OrderName" Title="Order Name">
            <EditTemplate Context="order">
                <RadzenTextBox @bind-Value="order.OrderName" Style="width:100%; display: block" Name="OrderName" />
                <RadzenRequiredValidator Text="Order Name is required" Component="OrderName" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrderDto" Property="State" Title="State">
            <EditTemplate Context="order">
                <RadzenTextBox @bind-Value="order.State" Style="width:100%; display: block" Name="State" />
                <RadzenRequiredValidator Text="State is required" Component="State" Popup="true" />
            </EditTemplate>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="OrderDto" Context="order" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
            <Template Context="order">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(args => EditOrderRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteOrderRow(order))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
            <EditTemplate Context="order">
                <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@((args) => SaveOrderRow(order))">
                </RadzenButton>
                <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@((args) => CancelOrderEdit(order))">
                </RadzenButton>
            </EditTemplate>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    #region Order
    RadzenDataGrid<OrderDto> ordersGrid;
    IList<OrderDto> orders;

    OrderDto orderToInsert;
    OrderDto orderToUpdate;
    long expandedOrderId = 0;

    void Reset()
    {
        orderToInsert = null;
        orderToUpdate = null;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        orders = await Http.GetFromJsonAsync<List<OrderDto>>("Orders");

    }
    async Task EditOrderRow(OrderDto order)
    {
        orderToUpdate = order;
        await ordersGrid.EditRow(order);
    }

    async Task OnOrderRowExpand(OrderDto order)
    {
        //orderToUpdate = order;
        windows = await Http.GetFromJsonAsync<List<WindowDto>>("Windows?id=" + order.OrderId);
        expandedOrderId = order.OrderId;
    }

    async Task OnUpdateOrderRow(OrderDto order)
    {
        if (order == orderToInsert)
        {
            orderToInsert = null;
        }

        orderToUpdate = null;
    }

    async Task SaveOrderRow(OrderDto order)
    {
        if (order.OrderId == 0)
        {
            var response = await Http.PostAsJsonAsync("Orders", order);
            var readAsStringAsync = response.Content.ReadAsStringAsync();
            var orderId = Convert.ToInt64(readAsStringAsync.Result.Split(',')[0].Split(':')[1]);
            order.OrderId = orderId;
            orders.Add(order);
        }
        else
        {
            await Http.PutAsJsonAsync("Orders", order);
        }

        orderToInsert = null;
        orderToUpdate = null;

        await ordersGrid.UpdateRow(order);

        await ordersGrid.Reload();
    }

    void CancelOrderEdit(OrderDto order)
    {
        if (order == orderToInsert)
        {
            orderToInsert = null;
        }

        orderToUpdate = null;

        ordersGrid.CancelEditRow(order);
    }

    async Task DeleteOrderRow(OrderDto order)
    {
        if (order == orderToInsert)
        {
            orderToInsert = null;
        }

        if (order == orderToUpdate)
        {
            orderToUpdate = null;
        }

        if (orders.Contains(order))
        {
            await Http.DeleteAsync("/Orders?id=" + order.OrderId);
            orders.Remove(order);
            await ordersGrid.Reload();
        }
        else
        {
            ordersGrid.CancelEditRow(order);
            await ordersGrid.Reload();
        }
    }

    async Task InsertOrderRow()
    {
        orderToInsert = new OrderDto();
        await ordersGrid.InsertRow(orderToInsert);
    }

    async Task OnCreateOrderRow(OrderDto order)
    {

        orderToInsert = null;
    }
    #endregion

    #region Window
    RadzenDataGrid<WindowDto> windowsGrid;
    IList<WindowDto> windows;

    WindowDto windowToInsert;
    WindowDto windowToUpdate;

    void ResetWindow()
    {
        windowToInsert = null;
        windowToUpdate = null;
    }

    async Task EditWindowRow(WindowDto window)
    {
        windowToUpdate = window;
        await windowsGrid.EditRow(window);
    }


    async Task OnUpdateWindowRow(WindowDto window)
    {
        if (window == windowToInsert)
        {
            windowToInsert = null;
        }

        windowToUpdate = null;
    }

    async Task SaveWindowRow(WindowDto window)
    {
        if (window.WindowId == 0)
        {
            window.TotalSubELements = 0;
            window.OrderId = expandedOrderId;
            var response = await Http.PostAsJsonAsync("Windows", window);
            var readAsStringAsync = response.Content.ReadAsStringAsync();
            var windowId = Convert.ToInt64(readAsStringAsync.Result.Split(',')[0].Split(':')[1]);
            window.WindowId = windowId;
            windows.Add(window);
        }
        else
        {
            await Http.PutAsJsonAsync("Windows", window);
        }

        windowToInsert = null;
        windowToUpdate = null;

        await windowsGrid.UpdateRow(window);

        await windowsGrid.Reload();
    }

    void CancelWindowEdit(WindowDto window)
    {
        if (window == windowToInsert)
        {
            windowToInsert = null;
        }

        windowToUpdate = null;

        windowsGrid.CancelEditRow(window);
    }

    async Task DeleteWindowRow(WindowDto window)
    {
        if (window == windowToInsert)
        {
            windowToInsert = null;
        }

        if (window == windowToUpdate)
        {
            windowToUpdate = null;
        }

        if (windows.Contains(window))
        {
            await Http.DeleteAsync("/Windows?id=" + window.WindowId);
            windows.Remove(window);
            await windowsGrid.Reload();
        }
        else
        {
            windowsGrid.CancelEditRow(window);
            await windowsGrid.Reload();
        }
    }

    async Task InsertWindowRow()
    {
        windowToInsert = new WindowDto();
        await windowsGrid.InsertRow(windowToInsert);
    }

    async Task OnCreateWindowRow(WindowDto window)
    {

        windowToInsert = null;
    }
    #endregion
}
